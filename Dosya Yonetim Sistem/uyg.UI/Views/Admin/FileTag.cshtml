@{
    ViewData["Title"] = "Etiketler";
    Layout = "_AdminLayout";
}

<!-- Toastr CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">

<style>
    .action-buttons {
        display: flex;
        gap: 8px;
    }

    .btn-action {
        padding: 6px 12px;
        border-radius: 6px;
        font-size: 0.875rem;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .btn-edit {
        background-color: #696cff;
        border: none;
        color: white;
    }

    .btn-edit:hover {
        background-color: #5f61e6;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .btn-delete {
        background-color: #ff3e1d;
        border: none;
        color: white;
    }

    .btn-delete:hover {
        background-color: #e63517;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .btn-add {
        background-color: #71dd37;
        border: none;
        color: white;
        padding: 8px 16px;
        border-radius: 6px;
        transition: all 0.3s ease;
    }

    .btn-add:hover {
        background-color: #65c431;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .table th {
        font-weight: 600;
        background-color: #f5f5f9;
    }

    .table td {
        vertical-align: middle;
    }

    .modal-content {
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0,0,0,0.1);
    }

    .modal-header {
        background-color: #f5f5f9;
        border-radius: 10px 10px 0 0;
    }

    .form-control:focus {
        border-color: #696cff;
        box-shadow: 0 0 0 0.2rem rgba(105, 108, 255, 0.25);
    }
</style>

<div class="container-xxl flex-grow-1 container-p-y">
    <h4 class="fw-bold py-3 mb-4">
        <span class="text-muted fw-light">Dosya Yönetimi /</span> Etiketler
    </h4>

    <!-- Etiket Listesi -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Etiket Listesi</h5>
            <button type="button" class="btn btn-add" data-bs-toggle="modal" data-bs-target="#addTagModal">
                <i class="bx bx-plus me-1"></i> Yeni Etiket
            </button>
        </div>
        <div class="card-body">
            <div class="table-responsive text-nowrap">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Etiket Adı</th>
                            <th>Açıklama</th>
                            <th>İşlemler</th>
                        </tr>
                    </thead>
                    <tbody class="table-border-bottom-0" id="tagList">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Yeni Etiket Modal -->
<div class="modal fade" id="addTagModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Yeni Etiket Ekle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addTagForm">
                    <div class="row">
                        <div class="col-12 mb-3">
                            <label class="form-label">Etiket Adı</label>
                            <input type="text" class="form-control" id="tagName" required />
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label">Açıklama</label>
                            <input type="text" class="form-control" id="tagDescription" />
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" onclick="saveTag()">Kaydet</button>
            </div>
        </div>
    </div>
</div>

<!-- Düzenleme Modal -->
<div class="modal fade" id="editTagModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Etiket Düzenle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editTagForm">
                    <input type="hidden" id="editTagId" />
                    <div class="row">
                        <div class="col-12 mb-3">
                            <label class="form-label">Etiket Adı</label>
                            <input type="text" class="form-control" id="editTagName" required />
                        </div>
                        <div class="col-12 mb-3">
                            <label class="form-label">Açıklama</label>
                            <input type="text" class="form-control" id="editTagDescription" />
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" onclick="updateTag()">Güncelle</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Toastr JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        $(document).ready(function () {
            loadTags();
        });

        function loadTags() {
            var token = localStorage.getItem('token');
            if (!token) {
                console.error('Token bulunamadı');
                window.location.href = '/Admin/Login';
                return;
            }

            console.log('API URL:', '@ViewBag.ApiBaseURL/FileTag');

            $.ajax({
                url: '@ViewBag.ApiBaseURL/FileTag',
                type: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + token,
                    'Accept': 'application/json'
                },
                success: function (response) {
                    console.log('API Response:', response);
                    console.log('Response Type:', typeof response);
                    console.log('Is Array:', Array.isArray(response));
                    
                    if (!Array.isArray(response)) {
                        console.error('API response is not an array:', response);
                        showError('Etiketler yüklenirken hata: API yanıtı dizi formatında değil');
                        return;
                    }

                    $('#tagList').empty();
                    response.forEach(function(tag) {
                        var row = `
                            <tr>
                                <td>${tag.Id}</td>
                                <td>${tag.TagName}</td>
                                <td>${tag.Description || ''}</td>
                                <td>${tag.IsActive ? 'Aktif' : 'Pasif'}</td>
                                <td>${tag.FileCount || 0}</td>
                                <td>
                                    <button class="btn btn-sm btn-primary" onclick="editTag(${tag.Id})">Düzenle</button>
                                    <button class="btn btn-sm btn-danger" onclick="deleteTag(${tag.Id})">Sil</button>
                                </td>
                            </tr>
                        `;
                        $('#tagList').append(row);
                    });
                },
                error: function (xhr, status, error) {
                    console.error('AJAX Error:', {
                        status: status,
                        error: error,
                        response: xhr.responseText
                    });
                    showError('Etiketler yüklenirken hata: ' + error);
                }
            });
        }

        function editTag(id) {
            var token = localStorage.getItem('token');
            if (!token) {
                window.location.href = '/Admin/Login';
                return;
            }

            console.log('Editing tag:', id);

            $.ajax({
                url: '@ViewBag.ApiBaseURL/FileTag/' + id,
                type: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + token
                },
                success: function (response) {
                    console.log('Edit Response:', response);
                    $('#editTagId').val(response.Id);
                    $('#editTagName').val(response.TagName);
                    $('#editTagDescription').val(response.Description);
                    $('#editTagModal').modal('show');
                },
                error: function (xhr, status, error) {
                    console.error('Edit Error:', {
                        status: status,
                        error: error,
                        response: xhr.responseText
                    });
                    showError('Etiket bilgileri alınırken hata: ' + error);
                }
            });
        }

        function updateTag() {
            var token = localStorage.getItem('token');
            if (!token) {
                window.location.href = '/Admin/Login';
                return;
            }

            var id = $('#editTagId').val();
            var tagName = $('#editTagName').val();
            var description = $('#editTagDescription').val();

            if (!id || !tagName) {
                toastr.error('Etiket adı boş olamaz');
                return;
            }

            var data = {
                Id: parseInt(id),
                TagName: tagName,
                Description: description,
                IsActive: true
            };

            console.log('Updating tag:', data);

            $.ajax({
                url: '@ViewBag.ApiBaseURL/FileTag',
                type: 'PUT',
                data: JSON.stringify(data),
                contentType: 'application/json',
                headers: {
                    'Authorization': 'Bearer ' + token,
                    'Accept': 'application/json'
                },
                success: function (response) {
                    console.log('Update Response:', response);
                    $('#editTagModal').modal('hide');
                    loadTags();
                    showSuccess('Etiket başarıyla güncellendi');
                },
                error: function (xhr, status, error) {
                    console.error('Update Error:', {
                        status: status,
                        error: error,
                        response: xhr.responseText
                    });
                    showError('Etiket güncellenirken hata: ' + error);
                }
            });
        }

        function saveTag() {
            var token = localStorage.getItem('token');
            if (!token) {
                window.location.href = '/Admin/Login';
                return;
            }

            var tagName = $('#tagName').val();
            var description = $('#tagDescription').val();

            if (!tagName) {
                toastr.error('Etiket adı boş olamaz');
                return;
            }

            var data = {
                TagName: tagName,
                Description: description
            };

            console.log('Sending tag data:', data);

            $.ajax({
                url: '@ViewBag.ApiBaseURL/FileTag',
                type: 'POST',
                data: JSON.stringify(data),
                contentType: 'application/json',
                headers: {
                    'Authorization': 'Bearer ' + token,
                    'Accept': 'application/json'
                },
                success: function (response) {
                    console.log('Save Response:', response);
                    $('#addTagModal').modal('hide');
                    $('#addTagForm')[0].reset();
                    loadTags();
                    showSuccess('Etiket başarıyla eklendi');
                },
                error: function (xhr, status, error) {
                    console.error('Save Error:', {
                        status: status,
                        error: error,
                        response: xhr.responseText
                    });
                    showError('Etiket eklenirken hata: ' + error);
                }
            });
        }

        function deleteTag(id) {
            if (!id) {
                console.error('Invalid tag id:', id);
                toastr.error('Geçersiz etiket ID');
                return;
            }

            var token = localStorage.getItem('token');
            if (!token) {
                window.location.href = '/Admin/Login';
                return;
            }

            if (!confirm('Bu etiketi silmek istediğinizden emin misiniz?')) {
                return;
            }

            console.log('Deleting tag:', id);

            $.ajax({
                url: '@ViewBag.ApiBaseURL/FileTag/' + id,
                type: 'DELETE',
                headers: {
                    'Authorization': 'Bearer ' + token,
                    'Accept': 'application/json'
                },
                success: function () {
                    loadTags();
                    showSuccess('Etiket başarıyla silindi');
                },
                error: function (xhr, status, error) {
                    console.error('Delete Error:', {
                        status: status,
                        error: error,
                        response: xhr.responseText
                    });
                    showError('Etiket silinirken hata: ' + error);
                }
            });
        }

        function showSuccess(message) {
            toastr.success(message);
        }

        function showError(message) {
            toastr.error(message);
        }
    </script>
} 